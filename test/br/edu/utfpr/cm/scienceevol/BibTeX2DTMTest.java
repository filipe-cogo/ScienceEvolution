package br.edu.utfpr.cm.scienceevol;

import static org.junit.Assert.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;

import org.junit.Before;
import org.junit.Test;

public class BibTeX2DTMTest {
	
	private BibTeX2DTM bib2dtm;

	@Before
	public void setUp() {
		bib2dtm = new BibTeX2DTM();
	}
	

	@Test
	public void testWrite1() throws Exception {
		String data =
				"@INPROCEEDINGS{teste,\n" +
		        "   title = {},\n" +
				"   abstract = {The development of collaborative and multimedia systems is a \n" +
				"      complex task and one of the key challenges is to promote the reuse and \n" +
				"      integration of those two software categories in the same environment.},\n" +
				"   keywords = {},\n" +
				"   year = {2010}\n" +
				"}";
		String expectedMain =
				"24 1:4 2:1 3:3 4:1 5:3 6:1 7:1 8:2 9:1 10:1 11:1 12:1 13:1 14:1 15:1 16:1 17:1 18:1 19:1 20:1 21:1 22:1 23:1 24:1";
		String expectedVocab = "the\n" +
				"development\n" +
				"of\n" +
				"collaborative\n" +
				"and\n" +
				"multimedia\n" +
				"system\n" +
				"is\n" +
				"complex\n" +
				"task\n" +
				"one\n" +
				"key\n" +
				"challenge\n" +
				"to\n" +
				"promote\n" +
				"reuse\n" +
				"integration\n" +
				"those\n" +
				"two\n" +
				"software\n" +
				"category\n" +
				"in\n" +
				"same\n" +
				"environment";
		String expectedDocs = "teste";
		String expectedAux =
				"1\n" +
				"1";
		bib2dtm.addInputStream(new ByteArrayInputStream(data.getBytes("UTF-8")));
		bib2dtm.setUseStemmer(false);
		bib2dtm.setUseStopwords(false);
		bib2dtm.read();
		ByteArrayOutputStream baosMain = new ByteArrayOutputStream();
		ByteArrayOutputStream baosAux = new ByteArrayOutputStream();
		ByteArrayOutputStream baosVocab = new ByteArrayOutputStream();
		ByteArrayOutputStream baosDocs = new ByteArrayOutputStream();
		bib2dtm.setDtmMain(baosMain);
		bib2dtm.setDtmAux(baosAux);
		bib2dtm.setDtmVocab(baosVocab);
		bib2dtm.setDtmDocs(baosDocs);
		bib2dtm.write();
		assertEquals(expectedMain, baosMain.toString());
		assertEquals(expectedVocab, baosVocab.toString());
		assertEquals(expectedDocs, baosDocs.toString());
		assertEquals(expectedAux, baosAux.toString());
	}
	
	@Test
	public void testWrite2() throws Exception {
		String data =
				"@INPROCEEDINGS{teste1,\n" +
		        "   title = {},\n" +
				"   abstract = {The development of collaborative and multimedia systems is a \n" +
				"      complex task and one of the key challenges is to promote the reuse and \n" +
				"      integration of those two software categories in the same environment.},\n" +
				"   keywords = {},\n" +
				"   year = {2010}\n" +
				"},\n" +
				"\n" +
				"@INPROCEEDINGS{teste2,\n" +
				"   title = {},\n" +
				"   abstract = {This work shows a model to detect a set of anomalous traces in a" +
				"      log generated by a business process management system.},\n" +
				"   keywords = {},\n" +
				"   year = {2011}\n" +
				"}";
		String expectedMain =
				"24 1:4 2:1 3:3 4:1 5:3 6:1 7:1 8:2 9:1 10:1 11:1 12:1 13:1 14:1 15:1 16:1 17:1 18:1 19:1 20:1 21:1 22:1 23:1 24:1\n" +
				"18 25:1 26:1 27:1 28:1 14:1 29:1 30:1 3:1 31:1 32:1 22:1 33:1 34:1 35:1 36:1 37:1 38:1 7:1";
		String expectedVocab = "the\n" +
				"development\n" +
				"of\n" +
				"collaborative\n" +
				"and\n" +
				"multimedia\n" +
				"system\n" +
				"is\n" +
				"complex\n" +
				"task\n" +
				"one\n" +
				"key\n" +
				"challenge\n" +
				"to\n" +
				"promote\n" +
				"reuse\n" +
				"integration\n" +
				"those\n" +
				"two\n" +
				"software\n" +
				"category\n" +
				"in\n" +
				"same\n" +
				"environment\n" +
				"this\n" +
				"work\n" +
				"show\n" +
				"model\n" +
				"detect\n" +
				"set\n" +
				"anomalous\n" +
				"trace\n" +
				"log\n" +
				"generated\n" +
				"by\n" +
				"business\n" +
				"process\n" +
				"management";
		String expectedDocs = 
				"teste1\n" +
				"teste2";
		String expectedAux =
				"2\n" +
				"1\n" +
				"1";
		bib2dtm.addInputStream(new ByteArrayInputStream(data.getBytes("UTF-8")));
		bib2dtm.setUseStemmer(false);
		bib2dtm.setUseStopwords(false);
		bib2dtm.read();
		ByteArrayOutputStream baosMain = new ByteArrayOutputStream();
		ByteArrayOutputStream baosAux = new ByteArrayOutputStream();
		ByteArrayOutputStream baosVocab = new ByteArrayOutputStream();
		ByteArrayOutputStream baosDocs = new ByteArrayOutputStream();
		bib2dtm.setDtmMain(baosMain);
		bib2dtm.setDtmAux(baosAux);
		bib2dtm.setDtmVocab(baosVocab);
		bib2dtm.setDtmDocs(baosDocs);
		bib2dtm.write();
		assertEquals(expectedMain, baosMain.toString());
		assertEquals(expectedVocab, baosVocab.toString());
		assertEquals(expectedDocs, baosDocs.toString());
		assertEquals(expectedAux, baosAux.toString());
	}

	@Test
	public void testWrite3() throws Exception {
		String data =
				"@INPROCEEDINGS{teste1,\n" +
		        "   title = {},\n" +
				"   abstract = {The development of collaborative and multimedia systems is a \n" +
				"      complex task and one of the key challenges is to promote the reuse and \n" +
				"      integration of those two software categories in the same environment.},\n" +
				"   keywords = {},\n" +
				"   year = {2010}\n" +
				"},\n" +
				"\n" +
				"@INPROCEEDINGS{teste2,\n" +
				"   title = {},\n" +
				"   abstract = {This work shows a model to detect a set of anomalous traces in a" +
				"      log generated by a business process management system.},\n" +
				"   keywords = {},\n" +
				"   year = {2011}\n" +
				"}," +
				"@INPROCEEDINGS{teste3,\n" +
				"   title = {},\n" +
				"   abstract = {This work shows a model to detect a set of anomalous traces in a" +
				"      log generated by a business process management system.},\n" +
				"   keywords = {},\n" +
				"   year = {2011}\n" +
				"}";
		String expectedMain =
				"24 1:4 2:1 3:3 4:1 5:3 6:1 7:1 8:2 9:1 10:1 11:1 12:1 13:1 14:1 15:1 16:1 17:1 18:1 19:1 20:1 21:1 22:1 23:1 24:1\n" +
				"18 25:1 26:1 27:1 28:1 14:1 29:1 30:1 3:1 31:1 32:1 22:1 33:1 34:1 35:1 36:1 37:1 38:1 7:1\n" +
				"18 25:1 26:1 27:1 28:1 14:1 29:1 30:1 3:1 31:1 32:1 22:1 33:1 34:1 35:1 36:1 37:1 38:1 7:1";
		String expectedVocab = "the\n" +
				"development\n" +
				"of\n" +
				"collaborative\n" +
				"and\n" +
				"multimedia\n" +
				"system\n" +
				"is\n" +
				"complex\n" +
				"task\n" +
				"one\n" +
				"key\n" +
				"challenge\n" +
				"to\n" +
				"promote\n" +
				"reuse\n" +
				"integration\n" +
				"those\n" +
				"two\n" +
				"software\n" +
				"category\n" +
				"in\n" +
				"same\n" +
				"environment\n" +
				"this\n" +
				"work\n" +
				"show\n" +
				"model\n" +
				"detect\n" +
				"set\n" +
				"anomalous\n" +
				"trace\n" +
				"log\n" +
				"generated\n" +
				"by\n" +
				"business\n" +
				"process\n" +
				"management";
		String expectedDocs = 
				"teste1\n" +
				"teste2\n" +
				"teste3";
		String expectedAux =
				"2\n" +
				"1\n" +
				"2";
		bib2dtm.addInputStream(new ByteArrayInputStream(data.getBytes("UTF-8")));
		bib2dtm.setUseStemmer(false);
		bib2dtm.setUseStopwords(false);
		bib2dtm.read();
		ByteArrayOutputStream baosMain = new ByteArrayOutputStream();
		ByteArrayOutputStream baosAux = new ByteArrayOutputStream();
		ByteArrayOutputStream baosVocab = new ByteArrayOutputStream();
		ByteArrayOutputStream baosDocs = new ByteArrayOutputStream();
		bib2dtm.setDtmMain(baosMain);
		bib2dtm.setDtmAux(baosAux);
		bib2dtm.setDtmVocab(baosVocab);
		bib2dtm.setDtmDocs(baosDocs);
		bib2dtm.write();
		assertEquals(expectedMain, baosMain.toString());
		assertEquals(expectedVocab, baosVocab.toString());
		assertEquals(expectedDocs, baosDocs.toString());
		assertEquals(expectedAux, baosAux.toString());
	}


}

